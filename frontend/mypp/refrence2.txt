import React, { useState, useEffect } from 'react';
import { 
  CheckSquare, 
  Square, 
  Bot, 
  Calendar, 
  Target, 
  TrendingUp, 
  Clock, 
  Award, 
  Zap,
  X,
  Send,
  User
} from 'lucide-react';

interface Skill {
  id: string;
  name: string;
  category: string;
  estimatedTime: string;
}

const RoadmapDashboard = () => {
  const [pendingSkills, setPendingSkills] = useState<Skill[]>([
    { id: '1', name: 'React Hooks Advanced', category: 'Frontend', estimatedTime: '2 weeks' },
    { id: '2', name: 'TypeScript Generics', category: 'Programming', estimatedTime: '1 week' },
    { id: '3', name: 'Node.js Microservices', category: 'Backend', estimatedTime: '3 weeks' },
    { id: '4', name: 'GraphQL Implementation', category: 'API', estimatedTime: '2 weeks' },
    { id: '5', name: 'Docker Containerization', category: 'DevOps', estimatedTime: '1 week' },
    { id: '6', name: 'AWS Lambda Functions', category: 'Cloud', estimatedTime: '2 weeks' }
  ]);

  const [completedSkills, setCompletedSkills] = useState<Skill[]>([
    { id: 'c1', name: 'JavaScript ES6+', category: 'Programming', estimatedTime: '2 weeks' },
    { id: 'c2', name: 'React Fundamentals', category: 'Frontend', estimatedTime: '3 weeks' },
    { id: 'c3', name: 'CSS Grid & Flexbox', category: 'Frontend', estimatedTime: '1 week' },
    { id: 'c4', name: 'Git Version Control', category: 'Tools', estimatedTime: '1 week' }
  ]);

  const [showChatbot, setShowChatbot] = useState(false);
  const [chatMessages, setChatMessages] = useState([
    { id: '1', sender: 'bot', message: 'Hello! I\'m here to help you with your learning roadmap. What would you like to know?' }
  ]);
  const [newMessage, setNewMessage] = useState('');

  const moveSkillToCompleted = (skillId: string) => {
    const skill = pendingSkills.find(s => s.id === skillId);
    if (skill) {
      setCompletedSkills([...completedSkills, skill]);
      setPendingSkills(pendingSkills.filter(s => s.id !== skillId));
    }
  };

  const sendMessage = () => {
    if (newMessage.trim()) {
      const userMessage = { 
        id: Date.now().toString(), 
        sender: 'user', 
        message: newMessage 
      };
      setChatMessages([...chatMessages, userMessage]);
      
      // Simulate AI response
      setTimeout(() => {
        const responses = [
          "Great question! Based on your current progress, I'd recommend focusing on TypeScript Generics next.",
          "That's an excellent skill to pursue! It typically takes about 2-3 weeks to master.",
          "I can help you create a personalized learning plan. Would you like me to prioritize your skills?",
          "Your progress is looking great! You've completed 40% of your frontend roadmap."
        ];
        const botResponse = { 
          id: (Date.now() + 1).toString(), 
          sender: 'bot', 
          message: responses[Math.floor(Math.random() * responses.length)]
        };
        setChatMessages(prev => [...prev, botResponse]);
      }, 1000);
      
      setNewMessage('');
    }
  };

  const completionRate = (completedSkills.length / (completedSkills.length + pendingSkills.length)) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-indigo-900 p-6">
      {/* Background Elements */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-blue-400/20 rounded-full blur-3xl"></div>
        <div className="absolute -bottom-40 -left-40 w-96 h-96 bg-cyan-400/20 rounded-full blur-3xl"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-64 h-64 bg-indigo-400/10 rounded-full blur-2xl"></div>
      </div>

      <div className="relative z-10 max-w-7xl mx-auto">
        {/* Header */}
        <div className="backdrop-blur-xl bg-white/10 rounded-2xl p-6 mb-8 border border-white/20">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold text-white mb-2">Learning Roadmap</h1>
              <p className="text-blue-200">Track your progress and master new skills</p>
            </div>
            <button
              onClick={() => setShowChatbot(true)}
              className="bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white p-4 rounded-xl shadow-lg transition-all duration-300 hover:scale-105"
            >
              <Bot className="w-6 h-6" />
            </button>
          </div>
        </div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="backdrop-blur-xl bg-white/10 rounded-xl p-6 border border-white/20">
            <div className="flex items-center space-x-3">
              <Target className="w-8 h-8 text-cyan-400" />
              <div>
                <p className="text-2xl font-bold text-white">{pendingSkills.length}</p>
                <p className="text-blue-200 text-sm">Pending Skills</p>
              </div>
            </div>
          </div>
          
          <div className="backdrop-blur-xl bg-white/10 rounded-xl p-6 border border-white/20">
            <div className="flex items-center space-x-3">
              <Award className="w-8 h-8 text-green-400" />
              <div>
                <p className="text-2xl font-bold text-white">{completedSkills.length}</p>
                <p className="text-blue-200 text-sm">Completed Skills</p>
              </div>
            </div>
          </div>
          
          <div className="backdrop-blur-xl bg-white/10 rounded-xl p-6 border border-white/20">
            <div className="flex items-center space-x-3">
              <TrendingUp className="w-8 h-8 text-yellow-400" />
              <div>
                <p className="text-2xl font-bold text-white">{completionRate.toFixed(0)}%</p>
                <p className="text-blue-200 text-sm">Completion Rate</p>
              </div>
            </div>
          </div>
          
          <div className="backdrop-blur-xl bg-white/10 rounded-xl p-6 border border-white/20">
            <div className="flex items-center space-x-3">
              <Zap className="w-8 h-8 text-purple-400" />
              <div>
                <p className="text-2xl font-bold text-white">12</p>
                <p className="text-blue-200 text-sm">Week Streak</p>
              </div>
            </div>
          </div>
        </div>

        {/* Progress Timeline */}
        <div className="backdrop-blur-xl bg-white/10 rounded-2xl p-6 mb-8 border border-white/20">
          <h3 className="text-xl font-semibold text-white mb-6 flex items-center">
            <Calendar className="w-5 h-5 mr-2" />
            Learning Timeline
          </h3>
          <div className="relative">
            <div className="absolute left-4 top-0 bottom-0 w-0.5 bg-gradient-to-b from-cyan-400 to-blue-600"></div>
            <div className="space-y-6">
              <div className="flex items-center">
                <div className="w-8 h-8 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full flex items-center justify-center mr-6">
                  <Award className="w-4 h-4 text-white" />
                </div>
                <div className="flex-1 backdrop-blur-sm bg-white/5 rounded-lg p-4">
                  <h4 className="text-white font-medium">JavaScript ES6+ Completed</h4>
                  <p className="text-blue-200 text-sm">2 days ago</p>
                </div>
              </div>
              <div className="flex items-center">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-400 to-cyan-500 rounded-full flex items-center justify-center mr-6">
                  <Clock className="w-4 h-4 text-white" />
                </div>
                <div className="flex-1 backdrop-blur-sm bg-white/5 rounded-lg p-4">
                  <h4 className="text-white font-medium">React Hooks Advanced - In Progress</h4>
                  <p className="text-blue-200 text-sm">Started 1 week ago</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Skills Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Pending Skills */}
          <div className="backdrop-blur-xl bg-white/10 rounded-2xl p-6 border border-white/20">
            <h2 className="text-2xl font-bold text-white mb-6 flex items-center">
              <Target className="w-6 h-6 mr-2 text-cyan-400" />
              Pending Skills ({pendingSkills.length})
            </h2>
            <div className="space-y-4">
              {pendingSkills.map((skill) => (
                <div key={skill.id} className="group backdrop-blur-sm bg-white/5 rounded-lg p-4 border border-white/10 hover:bg-white/10 transition-all duration-300">
                  <div className="flex items-center space-x-3">
                    <button
                      onClick={() => moveSkillToCompleted(skill.id)}
                      className="text-blue-300 hover:text-cyan-400 transition-colors duration-200"
                    >
                      <Square className="w-5 h-5" />
                    </button>
                    <div className="flex-1">
                      <h3 className="text-white font-medium">{skill.name}</h3>
                      <div className="flex items-center space-x-4 mt-1">
                        <span className="text-xs px-2 py-1 bg-blue-500/30 text-blue-200 rounded-full">
                          {skill.category}
                        </span>
                        <span className="text-xs text-blue-300 flex items-center">
                          <Clock className="w-3 h-3 mr-1" />
                          {skill.estimatedTime}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Completed Skills */}
          <div className="backdrop-blur-xl bg-white/10 rounded-2xl p-6 border border-white/20">
            <h2 className="text-2xl font-bold text-white mb-6 flex items-center">
              <Award className="w-6 h-6 mr-2 text-green-400" />
              Completed Skills ({completedSkills.length})
            </h2>
            <div className="space-y-4">
              {completedSkills.map((skill) => (
                <div key={skill.id} className="backdrop-blur-sm bg-white/5 rounded-lg p-4 border border-white/10">
                  <div className="flex items-center space-x-3">
                    <CheckSquare className="w-5 h-5 text-green-400" />
                    <div className="flex-1">
                      <h3 className="text-white font-medium line-through opacity-75">{skill.name}</h3>
                      <div className="flex items-center space-x-4 mt-1">
                        <span className="text-xs px-2 py-1 bg-green-500/30 text-green-200 rounded-full">
                          {skill.category}
                        </span>
                        <span className="text-xs text-green-300 flex items-center">
                          <Award className="w-3 h-3 mr-1" />
                          Completed
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* AI Chatbot Modal */}
        {showChatbot && (
          <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
            <div className="fixed inset-0 bg-black/50 backdrop-blur-sm" onClick={() => setShowChatbot(false)}></div>
            <div className="relative backdrop-blur-xl bg-white/10 rounded-2xl border border-white/20 w-full max-w-md h-96 flex flex-col">
              <div className="flex items-center justify-between p-4 border-b border-white/20">
                <div className="flex items-center space-x-2">
                  <Bot className="w-6 h-6 text-cyan-400" />
                  <h3 className="text-lg font-semibold text-white">AI Learning Assistant</h3>
                </div>
                <button
                  onClick={() => setShowChatbot(false)}
                  className="text-white/60 hover:text-white"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
              
              <div className="flex-1 overflow-y-auto p-4 space-y-3">
                {chatMessages.map((msg) => (
                  <div key={msg.id} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`max-w-xs p-3 rounded-lg ${
                      msg.sender === 'user' 
                        ? 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white' 
                        : 'backdrop-blur-sm bg-white/10 text-white border border-white/20'
                    }`}>
                      <div className="flex items-start space-x-2">
                        {msg.sender === 'bot' && <Bot className="w-4 h-4 mt-0.5 text-cyan-400" />}
                        {msg.sender === 'user' && <User className="w-4 h-4 mt-0.5" />}
                        <p className="text-sm">{msg.message}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              
              <div className="p-4 border-t border-white/20">
                <div className="flex space-x-2">
                  <input
                    type="text"
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                    placeholder="Ask about your learning path..."
                    className="flex-1 bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-cyan-400/50"
                  />
                  <button
                    onClick={sendMessage}
                    className="bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white p-2 rounded-lg transition-all duration-200"
                  >
                    <Send className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default RoadmapDashboard;